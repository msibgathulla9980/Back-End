package com.bridgelabz.fundoonotes.controller;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.validation.Validator;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.bridgelabz.fundoonotes.model.UserDetails;
import com.bridgelabz.fundoonotes.service.UserService;
import com.bridgelabz.fundoonotes.utility.TokenGenerator;

@Controller
@RequestMapping("/user")	
public class UserController {

	
	@Autowired
    @Qualifier("userValidator")
    private Validator validator;

    @InitBinder
    private void initBinder(WebDataBinder binder) {
        binder.setValidator(validator);
    }
	@Autowired
	private UserService userService;
	
	@Autowired
	private TokenGenerator generateToken;
	
	
	@PostMapping(value="/register")
	public ResponseEntity<?> register (@Validated @RequestBody UserDetails user,HttpServletRequest request, BindingResult bindingResult) {
		   if (bindingResult.hasErrors()) {
	            return new ResponseEntity<String>("Invalid entry!!! Please enter valid details", HttpStatus.NOT_FOUND);
	        }
		   else {
			   UserDetails newUser = userService.register(user, request);
		   
			   if(newUser!= null){
			return new ResponseEntity<String>("User Registered Successfully",HttpStatus.OK);
			   }
		else
			return new ResponseEntity<String>(HttpStatus.CONFLICT);
	}
	}

	@PostMapping(value="/login")
	public ResponseEntity<?> login(@RequestBody UserDetails user, HttpServletRequest request, HttpServletResponse response) {

		String token=userService.login(user, request,response);
		if(token!=null) {
			response.setHeader("token",token);
            return new ResponseEntity<Void>(HttpStatus.OK);
			
		}

			return new ResponseEntity<String>("User not found by the given Email Id",HttpStatus.NOT_FOUND);	

	}

	@PutMapping(value="/update")
	public ResponseEntity<String> update(@RequestHeader("token") String token, @RequestBody UserDetails existinguser, HttpServletRequest request)
	{
		UserDetails userDetails=userService.update(token, existinguser, request);

		if(userDetails!=null) {
			return new ResponseEntity<String>("User Successfully Updated", HttpStatus.OK);
		}
		else

			return new ResponseEntity<String>("EmailId or password are incorrect, Please provide correct details",HttpStatus.CONFLICT);

	}

	@DeleteMapping(value="/delete")
	public ResponseEntity<String> delete(@RequestHeader("token") String token, HttpServletRequest request)
	{

		UserDetails userDetails=userService.delete(token,request);

		if (userDetails!=null)

			return new ResponseEntity<String>("User Succesfully deleted",HttpStatus.FOUND);

		else
			return  new ResponseEntity<String>("User not Found by given  Id",HttpStatus.NOT_FOUND);

	}



	@GetMapping(value="/activationstatus/{token:.+}")
	public ResponseEntity<String> activateUser(@PathVariable String token, HttpServletRequest request) {

		UserDetails user = userService.activateUser(token, request);

		if (user != null) {

			return new ResponseEntity<String>("User has been activated successfully", HttpStatus.FOUND);
		} 
		else {

			return new ResponseEntity<String>("Email incorrect. Please enter valid email address present in database",
					HttpStatus.NOT_FOUND);
		}

	}	


	@PostMapping(value="/forgotPassword")
	public ResponseEntity<?> forgotPassword(@RequestParam ("emailId") String emailId, HttpServletRequest request)
	{

		UserDetails user=userService.forgotPassword(emailId,request);

		if (user!=null) 
			return new ResponseEntity<String>("Forgot password link has been sent", HttpStatus.FOUND);


		return new ResponseEntity<String>("You've Entered a invalid email, Please enter the valid email", HttpStatus.NOT_FOUND);




	}

	@PutMapping(value="/resetPassword/{token:.+}")
	public ResponseEntity<?> resetPassword(@RequestBody UserDetails user, @PathVariable("token") String token, HttpServletRequest request)
	{
		UserDetails resetuser=userService.resetPassword(user, token, request);
		if (resetuser != null) 

			return new ResponseEntity<String>("Your password has been reset successfully", HttpStatus.FOUND);



		return new ResponseEntity<String>("Could not reset your password ", HttpStatus.NOT_FOUND);



	}

}
