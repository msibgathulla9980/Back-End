package com.bridgelabz.fundoonotes.service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.bridgelabz.fundoonotes.dao.LabelRepository;
import com.bridgelabz.fundoonotes.dao.NoteRepository;
import com.bridgelabz.fundoonotes.exception.NotFoundError;
import com.bridgelabz.fundoonotes.model.Label;
import com.bridgelabz.fundoonotes.model.Note;
import com.bridgelabz.fundoonotes.utility.*;


@Service
public class NoteServiceImpl implements NoteService {

	@Autowired
	private TokenGenerator generateToken;

	@Autowired
	private NoteRepository noteRepository;
	

	@Autowired
	private LabelRepository labelRepository;
	 
	public Note createNote(String token, Note note, HttpServletRequest request) 
	 
	{
		int id=generateToken.verifyToken(token);
		note.setUserId(id);
		noteRepository.save(note);
		return note;
	}

	@Override
	public List<Note> retrieveNote(String token, HttpServletRequest request) {
		//int userId = generateToken.verifyToken(token);
		//List<Note> notes = noteRepository.findAllByUserId(userId);
		List<Note> notes = noteRepository.findAll();
		
		if (!notes.isEmpty()) {
			
			return notes;
		}
		return null;
	}
	@Override
	public Note updateNote(String token,int noteId, Note note, HttpServletRequest request) {
		int userId = generateToken.verifyToken(token);
		System.out.println(note.getNoteId());
		Optional<Note> maybeNote = noteRepository.findByUserIdAndNoteId(userId, noteId);	
		return maybeNote
				.map(existingNote -> noteRepository
						.save(existingNote.setTitle(note.getTitle()).setDescription(note.getDescription())
								.setArchive(note.isArchive()).setInTrash(note.isInTrash()).setPinned(note.isPinned())))
				.orElseGet(() -> null);
}		
//
//	@Override
//	public Note updateNote(String token, int noteId, Note note, HttpServletRequest request) {
//			int userId = generateToken.verifyToken(token);
//			System.out.println(note.getNoteId());
//			Optional<Note> maybeNote = noteRepository.findByUserIdAndNoteId(userId, noteId);
//			return maybeNote.map(existingNote -> {
//				existingNote.setTitle(note.getTitle())
//				.setDescription(note.getDescription())
//				.setArchive(note.isArchive()).setInTrash(note.isInTrash()).setPinned(note.isPinned());	
//			
//			return noteRepository.save(existingNote);
//}).orElseThrow(() -> new NotFoundError("Note not found"));
//
//		}
//	if (optional.isPresent()) {
//	Note newNote = optional.get();
//	
//	if (newNote.getUserId() == userId) {
//		Note updatedNote = newNoteUpdate(newNote, note);
//		noteRepository.save(updatedNote);
//		return updatedNote;
//	}
//}
//return null;
	

//	public Note newNoteUpdate(Note newNote, Note note) {
//		if (note.getTitle() != null)
//			newNote.setTitle(note.getTitle());
//		if (note.getDescription() != null)
//			newNote.setDescription(note.getDescription());
//		if (note.isArchive() != false)
//			newNote.setArchive(note.isArchive());
//		if (note.isPinned() != false)
//			newNote.setPinned(note.isPinned());
//		if (note.isInTrash() != false)
//			newNote.setInTrash(note.isInTrash());
//		return newNote;
//	}
	
	
	@Override
	public Note deleteNote(String token, int noteId, HttpServletRequest request) {
		int userId = generateToken.verifyToken(token);
		Optional<Note> optional = noteRepository.findById(noteId);
		if (optional.isPresent()) {
			Note newNote = optional.get();
			if (newNote.getUserId() == userId) {
				
			return newNote;
			}	
		}
		return null;
	}
	
	@Override
	public List<Note> archiveNote(String token, HttpServletRequest request) {
		int userId = generateToken.verifyToken(token);
		List<Note> notes = noteRepository.findAllByUserIdAndIsArchive(userId, true);
		
		if (!notes.isEmpty())
			return notes;
		return null;
}
	
	@Override
	public List<Note> pinnedNote(String token, HttpServletRequest request) {
		int userId = generateToken.verifyToken(token);
		List<Note> notes = noteRepository.findAllByUserIdAndIsPinned(userId, true);
		noteRepository.saveAll(notes);
		if (!notes.isEmpty())
			return notes;
		return null;
}

//	@Override
//	public List<Note> trashNote(String token, HttpServletRequest request) {
//		int userId = generateToken.verifyToken(token);
//		List<Note> notes = noteRepository.findAllByUserIdAndInTrash(userId, true);
//		
//		if (!notes.isEmpty())
//			return notes;
//		return null;
//}

	@Override
	public Label createLabel(String token, Label label, HttpServletRequest request) {
		int userId = generateToken.verifyToken(token);
		label.setUserId(userId);
		labelRepository.save(label);
		return label;
	}
	
	@Override
	public List<Label> retrieveLabel(String token, HttpServletRequest request) {
		int userId = generateToken.verifyToken(token);
		List<Label> labels = labelRepository.findByUserId(userId);
		if (!labels.isEmpty()) {
			return labels;
		}
		return null;
	}
	
	
	@Override
	public Label updateLabel(String token, int labelId, Label label, HttpServletRequest request) {
		int userId = generateToken.verifyToken(token);
		Optional<Label> optional = labelRepository.findById(labelId);
		if (optional.isPresent()) {
			Label newLabel = optional.get();
			if (newLabel.getUserId() == userId) {
				if (label.getLabelName() != null)
					newLabel.setLabelName(label.getLabelName());
				labelRepository.save(newLabel);
				return newLabel;
			}
		}
		return null;
	}
	
	@Override
	public Label deleteLabel(String token, int labelId, HttpServletRequest request) {
		int userId = generateToken.verifyToken(token);
		Optional<Label> optional = labelRepository.findById(labelId);
		if (optional.isPresent()) {
			Label newLabel = optional.get();
			if (newLabel.getUserId() == userId)
				labelRepository.delete(newLabel);
			return newLabel;
		}
		return null;
	}
	
	@Override
	public boolean addNoteByLabel(String token, int noteId, int labelId, HttpServletRequest request) {
		int userId = generateToken.verifyToken(token);
		Optional<Note> optionalNote = noteRepository.findById(noteId);
		Optional<Label> optionalLabel = labelRepository.findById(labelId);
		if (optionalNote.isPresent() && optionalLabel.isPresent()) {
			Note note = optionalNote.get();
			Label label = optionalLabel.get();
			if (note.getUserId() == userId && label.getUserId() == userId) {
				List<Label> labels = note.getLabels();
				labels.add(label);
				if (!labels.isEmpty()) {
					note.setLabels(labels);
					noteRepository.save(note);
					return true;
				}
			}
		}
		return false;
	}

	@Override
	public boolean removeNoteByLabel(String token, int noteId, int labelId, HttpServletRequest request) {
		int userId = generateToken.verifyToken(token);
		Optional<Note> optionalNote = noteRepository.findById(noteId);
		Optional<Label> optionalLabel = labelRepository.findById(labelId);
		if (optionalNote.isPresent() && optionalLabel.isPresent()) {
			Note note = optionalNote.get();
			Label label = optionalLabel.get();
			if (note.getUserId() == userId && label.getUserId() == userId) {
				List<Label> labels = note.getLabels();
				if (!labels.isEmpty()) {
					labels = labels.stream().filter(newLabel -> newLabel.getLabelId() != labelId).collect(Collectors.toList());
					note.setLabels(labels);
					noteRepository.save(note);
					return true;
				}
			}
		}
		return false;
	}
	
	}
	
	

	

