package com.bridgelabz.fundoonotes.controller;

import java.io.IOException;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.bridgelabz.fundoonotes.model.Label;
import com.bridgelabz.fundoonotes.model.Note;
import com.bridgelabz.fundoonotes.service.NoteService;

@Controller
@RequestMapping("/note/")
public class NoteController {

	@Autowired
	private NoteService noteService;

	@PostMapping
	public ResponseEntity<?> createNote(@RequestHeader("token") String token,@RequestBody Note usernote, HttpServletRequest request) {

		List<Note> notes=noteService.createNote(token, usernote, request);

		if (notes!=null)

			return new ResponseEntity<List<Note>>(notes, HttpStatus.OK);

		else

			return new ResponseEntity<String>("Cannot create a note",HttpStatus.CONFLICT);
	}

	@GetMapping(value = "retrievenote")
	public ResponseEntity<?> retrieveNote(@RequestHeader("token") String token, HttpServletRequest request) {

		List<Note> notes = noteService.retrieveNote(token, request);

		if (!notes.isEmpty())
			return new ResponseEntity<List<Note>>(notes, HttpStatus.OK);

		else 

			return new ResponseEntity<String>("Please enter the value note id or verify your login", HttpStatus.CONFLICT);
	}

	@PutMapping(value = "updatenote/{noteId:.+}")
	public ResponseEntity<?> updateNote(@RequestHeader("token") String token, @PathVariable("noteId") int noteId, @RequestBody Note note, HttpServletRequest request) {

		Note newNote = noteService.updateNote(token, noteId, note, request);
        System.out.println("Here!!!!!!!!");
        System.out.println("Reminder:"+note.getReminder());
		if (newNote != null)
		{
	return new ResponseEntity<Void>(HttpStatus.OK);

		}

		return new ResponseEntity<String>("Please enter the value note id or verify your login", HttpStatus.CONFLICT);

	}

	@DeleteMapping(value ="deletenote/{noteId:.+}")
	public ResponseEntity<?> deleteNote(@RequestHeader("token") String token, @PathVariable("noteId") int noteId, HttpServletRequest request) {

		Note note = noteService.deleteNote(token, noteId, request);
      
		if (note != null) {
			System.out.println("Notes are deleted!!!!!!!.");
			return new ResponseEntity<Void>(HttpStatus.OK);

		}

		else

			return new ResponseEntity<String>("Note cannot be deleted", HttpStatus.CONFLICT);

	}
	
	@PostMapping(value = "createlabel")
	public ResponseEntity<?> createLabel(@RequestHeader("token") String token, @RequestBody Label label, HttpServletRequest request) {

		Label userLabel=noteService.createLabel(token, label, request);

		if (userLabel!= null)

			return new ResponseEntity<Void>(HttpStatus.OK);
		else

			return new ResponseEntity<String>("Label cannot be created", HttpStatus.CONFLICT);
	}

	@GetMapping(value = "retrievelabel")
	public ResponseEntity<?> retrieveLabel(@RequestHeader("token") String token, HttpServletRequest request) {

		List<Label> labels = noteService.retrieveLabel(token, request);

		if (!labels.isEmpty())

			return new ResponseEntity<List<Label>>(labels, HttpStatus.OK);

		else 

			return new ResponseEntity<String>("Please enter the value note id or verify your login", HttpStatus.NOT_FOUND);
	}

	@PutMapping(value = "updatelabel/{labelId:.+}")
	public ResponseEntity<?> updateLabel(@RequestHeader("token") String token, @PathVariable("labelId") int labelId,@RequestBody Label label, HttpServletRequest request) {

		Label newLabel = noteService.updateLabel(token, labelId, label, request);

		if (newLabel != null) {
            
			return new ResponseEntity<Void>(HttpStatus.OK);
		}
		else

			return new ResponseEntity<String>("User id given is not present or Note yet been activated",HttpStatus.CONFLICT);

	}

	@DeleteMapping(value = "deletelabel/{labelId:.+}")
	public ResponseEntity<?> deleteLabel(@RequestHeader("token") String token, @PathVariable("labelId") int labelId, HttpServletRequest request) {
		Label label = noteService.deleteLabel(token, labelId, request);

		if (label != null)

			return new ResponseEntity<Label>(label, HttpStatus.OK);

		else

			return new ResponseEntity<String>("User id given is not present or Note yet been activated", HttpStatus.CONFLICT);
	}

	@PutMapping(value = "addnotebylabel/{noteId:.+}")
	public ResponseEntity<?> addNoteByLabel(@PathVariable(value ="noteId") int noteId, 	@RequestBody Label label, HttpServletRequest request) {

		if (noteService.addNoteByLabel(noteId, label, request))

			return new ResponseEntity<Void>(HttpStatus.OK);

		else

			return new ResponseEntity<String>(HttpStatus.CONFLICT);
	}

	@DeleteMapping(value = "removenotebylabel")
	public ResponseEntity<?> removeNoteByLabel( @RequestParam("noteId") int noteId, @RequestParam("labelId") int labelId, HttpServletRequest request) {

		if (noteService.removeNoteByLabel(noteId, labelId, request))

			return new ResponseEntity<Void>(HttpStatus.OK);
		
		else

			return new ResponseEntity<String>("User id given is not present or Note yet been activated", HttpStatus.CONFLICT);
	}
	
	@PostMapping(value = "createcollaborator/{noteId}/{userId}")
	public ResponseEntity<?> createCollaborator(@RequestHeader("token") String token, @PathVariable("noteId") int noteId, @PathVariable("userId") int userId,HttpServletRequest request) {
		if (noteService.createCollaborator(token, noteId, userId))
			return new ResponseEntity<Void>(HttpStatus.OK);
		return new ResponseEntity<String>(" Cannot create a collaborator", HttpStatus.CONFLICT);
	}
	

	@DeleteMapping("removecollaborator/{userId}/{noteId}")
    public ResponseEntity<?> removeCollaborator(@PathVariable("userId") int userId, @PathVariable("noteId") int noteId) {
        if(noteService.removeCollaborator(userId,noteId))
			return new ResponseEntity<Void>(HttpStatus.OK);
        return new ResponseEntity<String>("Couldnot delete the image", HttpStatus.CONFLICT);
    }

	@PostMapping(value = "photo/{noteId}")
	public ResponseEntity<?> storeFile(@RequestParam("file") MultipartFile file, @PathVariable("noteId") int noteId) throws IOException {
		if (noteService.store(file,noteId))
			return new ResponseEntity<Void>(HttpStatus.OK);
		return new ResponseEntity<String>("Error in uploading the image", HttpStatus.CONFLICT);
	}
	
	@DeleteMapping("photo/{imageId}")
    public ResponseEntity<?> deleteFile(@PathVariable("imageId") int imageId) {
        if(noteService.deleteFile(imageId))
			return new ResponseEntity<Void>(HttpStatus.OK);
        return new ResponseEntity<String>("Couldnot delete the image", HttpStatus.CONFLICT);
    }
	
}
